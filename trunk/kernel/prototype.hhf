#includeonce("const.hhf")
#includeonce("always.hhf")

//routines for use in C and HLA
procedure disable_interrupts; @external;
procedure enable_interrupts; @external;
procedure halt; @external;
procedure get_free_gdt_idx; @returns("eax"); @external;
procedure get_free_pid; @returns("eax"); @external;
procedure pick_next_proc; @external;
procedure charge_process; @external;
procedure show_queue; @external;
procedure syscall_exit; @external;
procedure syscall_setFeature; @external;
procedure syscall_send; @external;
procedure syscall_receive; @external;
procedure syscall_requestFeature; @external;
procedure syscall_send_by_feature; @external;
procedure init_port_accessers; @external;

//routines for use in HLA
procedure _get_limit(gdtIndex: dword); @returns("eax"); @external;
procedure _kcls; @external;
procedure _kputchar(what: dword); @external;
procedure _kputstring(what: string); @external;
procedure _kputhex(what: dword); @external;
procedure _kputbin(what: dword); @external;
procedure _kputunsint(what: dword); @external;
procedure _kputsint(what: dword); @external;
procedure _kscrollscreen; @external;
procedure _kmove_cursor; @external;
procedure _write_tss_desc(index: dword; limit: dword; base: dword; present: dword; privilege: dword; busy: dword; granularity: dword); @external;
procedure _write_segment_desc(index: dword; limit: dword; base: dword; present: dword; privilege: dword; _type: dword; granularity: dword); @external;
procedure _create_process(privilege: dword; schedticks: dword; start: dword; csegmBase: dword; dsegmBase:dword; esegmBase: dword; fsegmBase: dword; gsegmBase: dword; ssegmBase: dword; csegmLimit: dword; dsegmLimit:dword; esegmLimit: dword; fsegmLimit: dword; gsegmLimit: dword; ssegmLimit: dword); @returns("eax"); @external;
procedure _unfree_gdt_idx(what: dword); @external;
procedure _free_gdt_idx(what: dword); @external;
procedure _unfree_pid(what: dword); @external;
procedure _free_pid(what: dword); @external;
procedure _exchange_data(sender: dword; receiver: dword); @external;
procedure _set_error(context: dword; process:dword); @external;
procedure _enqueue(process: dword); @external;
procedure _dequeue(process: dword); @external;

//routines for use in C
procedure enqueue(process: dword); @cdecl; @external;
procedure dequeue(process: dword); @cdecl; @external;
procedure do_hard_int(number: dword); @cdecl; @external;
procedure do_exception(number: dword); @cdecl; @external;
procedure release_irqs_taken(process: dword); @cdecl; @external;
procedure unblock_waiting_senders(context: dword; process: dword); @cdecl; @external;
procedure get_process_by_feature(feature: dword); @returns("eax"); @cdecl; @external;
procedure validate_data_area(process: dword; mem: dword;size: dword);@returns("eax"); @cdecl; @external;
procedure check_feature(feature: dword); @cdecl; @external;
procedure create_process(privilege: dword; schedticks: dword; start: dword;
 csegmBase: dword; dsegmBase:dword; esegmBase: dword;
 fsegmBase: dword; gsegmBase: dword; ssegmBase: dword;
 csegmLimit: dword; dsegmLimit:dword; esegmLimit: dword;
 fsegmLimit: dword; gsegmLimit: dword; ssegmLimit: dword); @returns("eax"); @cdecl; @external;

procedure get_sender(sender: dword; receiver: dword); @returns("eax"); @cdecl; @external;
procedure show_tss(process:dword); @cdecl; @external;
procedure receiving_from(receiver: dword; sender: dword); @returns("eax");@cdecl;@external;
procedure remove_from_senders_list(sender: dword; receiver: dword); @cdecl;@external;
procedure clear_receiving_from(receiver: dword); @cdecl;@external;
procedure mark_as_receiving_from(receiver: dword; sender: dword); @cdecl;@external;
procedure add_to_senders_list(sender: dword; receiver: dword); @cdecl;@external;
procedure add_waiting_for_feature(process: dword; feature:dword); @cdecl; @external;
//to be dropped
//procedure disable_interrupts_HLA; @external;
//procedure enable_interrupts_HLA; @external;
//procedure streq(s1: string; s2: string); @returns("eax"); @external;
//procedure key_int; @external;
//procedure clock_int; @external;
//procedure sys_call; @external;
//tty
//procedure readchar(what:dword); @external;
//procedure enter_pressed; @external;
//procedure backspace_pressed; @external;
//procedure shift_pressed; @external;
//procedure shift_released; @external;
//procedure echo(what:string); @external;
//procedure _clear_echoline; @external;
//other
procedure writer; @cdecl; @external;
procedure idle_task; @external;
procedure uptime; @external;
procedure say; @external;

//special "function", never call!
procedure start(pass: dword); @external;

#macro intrrpt_procedure_decl(string _x_);
  procedure @text("hw_intrrpt"+_x_); @external;
#endmacro
?@tostring:intrrpt:text := "intrrpt_procedure_decl";

#include("interrupts.hhf");

#macro exceptn_procedure_decl(string _x_);
  procedure @text("hw_exceptn"+_x_); @external;
#endmacro
?@tostring:exceptn:text := "exceptn_procedure_decl";

#include("exceptions.hhf");


#macro end_of_buffer(what);
  &what.buffer[KBD_BUFFER_SIZE-1]
#endmacro

#macro up(what);
  inc(what);
#endmacro

#macro down(what);
  dec(what);
#endmacro

namespace variant_args;

#macro prepare_args(reg1,reg2,reg3);
  mov([ebp+8],reg1);
  dec(reg1);
  shl(2,reg1);
  mov(ebp,reg2);
  add(reg1,reg2)
#endmacro

#macro start_args(reg1,reg2,reg3);
  forever
#endmacro

#macro get_arg(reg1,reg2,reg3);
  if (reg1 = 0) then
    break;
  endif;
  sseg: mov([reg2+8],reg3)
#endmacro

#macro next_arg(reg1,reg2,reg3);
  sub(4,reg1);
  sub(4,reg2)
#endmacro

#macro end_args(reg1,reg2,reg3);
  endfor;
#endmacro

end variant_args;

#macro init_clock(divider);
  mov(%00110100,al);			//Timer channel 0, lobyte/hibyte, rate generator
  out(al,$43);				//Set timer mode!
  mov(divider,ax);			//ax = divider
  out(al,$40);				//write low byte of clock divider
  shr(8,ax);				//write high byte of clock divider
  out(al,$40)
#endmacro

#macro addToEchCursor(what);
  add(what,echcursor);
  _kmove_cursor()
#endmacro

#macro subFromEchCursor(what);
  sub(what,echcursor);
  _kmove_cursor()
#endmacro

#macro moveToEchCursor(what);
  mov(what,echcursor);
  _kmove_cursor()
#endmacro

#macro schedule(returnFrom);
  push(eax);
  push(ebx);
  mov(nextptr,eax);
  mov(NULL,nextptr);
  mov(eax,curptr);
  zerify(ebx);
  mov((type tss_t [eax]).idx_tss,bx);
  mov(returnFrom,eax);
  mov(bx,(type tss_t [eax]).backlink);
  mov(GDT_BASE,eax); //set
  add(ebx,eax); //busy flag
  fseg: mov((type segdesc_t [eax]).props1,bl); //for
  or(%00000010,bl); //incoming
  fseg: mov(bl,(type segdesc_t [eax]).props1); //task
  pop(ebx);
  pop(eax);
#endmacro;