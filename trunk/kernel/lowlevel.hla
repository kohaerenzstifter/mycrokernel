unit Utilities;


#includeonce("always.hhf")
#includeonce("types.hhf")
#includeonce("const.hhf")
#includeonce("prototype.hhf")
#includeonce("external.hhf")
#includeonce("../include/always.hhf")

procedure say;
begin say;
  push(eax);
  push(ebx);
  push(ecx);
  push(edx);
  pushfd();

  zerify(edx);

  variant_args.prepare_args(eax,ebx,ecx);
  variant_args.start_args(eax,ebx,ecx)
  variant_args.get_arg(eax,ebx,ecx);
  _kputstring(ecx);
  _kputchar(' ');
  inc(edx);
  variant_args.next_arg(eax,ebx,ecx);
  variant_args.end_args(eax,ebx,ecx)

  if(edx = 0) then
    _kputstring("WHAT?");
    _kputchar(LF);
  endif;
  popfd();
  pop(edx);
  pop(ecx);
  pop(ebx);
  pop(eax);
end say;

procedure idle_task;
begin idle_task;
  forever
    hlt;
  endfor;
end idle_task;

procedure _write_tss_desc(index: dword; limit: dword; base: dword; present: dword; privilege: dword; busy: dword; granularity: dword);
begin _write_tss_desc;
  push(eax);
  push(ebx);
  push(edx);
  pushfd();
  mov(index,eax);
  if (gdt.limit < ax) then
    add(@size(segdesc_t),eax);
    dec(eax);
    mov(ax,gdt.limit);
    inc(eax);
    sub(@size(segdesc_t),eax);
    lgdt(gdt);
  endif;
  add(GDT_BASE,eax);

  mov(limit,ebx);
  fseg: mov(bx,(type segdesc_t [eax]).limit);
  shr(16,ebx);
  mov(granularity,edx);
  shl(7,edx);
  or(edx,ebx);
  fseg: mov(bl,(type segdesc_t [eax]).props2);

  mov(base,ebx);
  fseg: mov(bx,(type segdesc_t [eax]).base1);
  shr(16,ebx);
  fseg: mov(bl,(type segdesc_t [eax]).base2);
  fseg: mov(bh,(type segdesc_t [eax]).base3);

  mov(privilege,ebx);
  shl(5,ebx);
  mov(busy,edx);
  shl(1,edx);
  or(edx,ebx);
  mov(present,edx);
  shl(7,edx);
  or(edx,ebx);
  or(%00001001,ebx);
  fseg: mov(bl,(type segdesc_t [eax]).props1);

  _unfree_gdt_idx(index);

  popfd();
  pop(edx);
  pop(ebx);
  pop(eax);
end _write_tss_desc;

procedure _write_segment_desc
  (index: dword; limit: dword; base: dword;
  present: dword; privilege: dword; _type: dword;
  granularity: dword);
begin _write_segment_desc;
  push(eax);
  push(ebx);
  push(edx);
  pushfd();
  mov(index,eax);
  if (gdt.limit < ax) then
    add(@size(segdesc_t),eax);
    dec(eax);
    mov(ax,gdt.limit);
    inc(eax);
    sub(@size(segdesc_t),eax);
    lgdt(gdt);
  endif;
  add(GDT_BASE,eax);

  mov(limit,ebx);
  fseg: mov(bx,(type segdesc_t [eax]).limit);
  shr(16,ebx);
  mov(granularity,edx);
  shl(7,edx);
  or(%1000000,edx);
  or(edx,ebx);
  fseg: mov(bl,(type segdesc_t [eax]).props2);

  mov(base,ebx);
  fseg: mov(bx,(type segdesc_t [eax]).base1);
  shr(16,ebx);
  fseg: mov(bl,(type segdesc_t [eax]).base2);
  fseg: mov(bh,(type segdesc_t [eax]).base3);

  mov(privilege,ebx);
  shl(5,ebx);
  mov(present,edx);
  shl(7,edx);
  or(edx,ebx);
  mov(_type,edx);
  if ((type segtype_t dl)=CODE) then
    or(%11010,bl);
  elseif ((type segtype_t dl)=DATA) then
    or(%10010,bl);
  else
    or(%10110,bl);
  endif;
  fseg: mov(bl,(type segdesc_t [eax]).props1);

  _unfree_gdt_idx(index);

  popfd();
  pop(edx);
  pop(ebx);
  pop(eax);
end _write_segment_desc;

procedure _get_limit(gdtIndex: dword);
begin _get_limit;
  push(ebx);
  pushfd();
  mov(gdtIndex, ebx);
  add(GDT_BASE, ebx);
  fseg: movzx((type segdesc_t [ebx]).limit,eax);

  fseg: movzx((type segdesc_t [ebx]).props2,ebx);

  shl(16,ebx);
  or(ebx,eax);
  and(%100000000000000000000000,ebx);
  if (@z) then
    and(%11111111111111111111,eax);
  else
    and(%11111111111111111111,eax);
    shl(12,eax);
  endif;
  popfd();
  pop(ebx);
end _get_limit;

procedure _create_process(privilege: dword; schedticks: dword; start: dword;
 csegmBase: dword; dsegmBase:dword; esegmBase: dword;
 fsegmBase: dword; gsegmBase: dword; ssegmBase: dword;
 csegmLimit: dword; dsegmLimit:dword; esegmLimit: dword;
 fsegmLimit: dword; gsegmLimit: dword; ssegmLimit: dword);
var
  buffer: dword[NO_PROCSEGMENTS];
begin _create_process;
  push(ebx);
  push(ecx);
  push(edx);
  push(edi);
  push(esi);
  pushfd();
  mov(privilege,esi);
  zerify(edi);
  forever
    mov(pproctab[edi],ebx);
    if ((type tss_t [ebx]).state = EMPTY) then
      break;
    endif;
    add(@size(dword),edi);
    if (edi = MAX_NO_PROCS*@size(dword)) then
      break;
    endif;
  endfor;
  if (edi = MAX_NO_PROCS*@size(dword)) then
    mov(E_NONEWPROCESS,eax);
  else
    if (csegmBase != NO_BASE) then
      if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	lea(buffer,ecx);
	sseg:mov(eax,[ecx]);
	mov(csegmLimit,edx);
	if (edx > $fffff) then
	  push(eax);
	  push(edx);
	  and(%1111111111,edx);
	  pop(edx);
	  if (@z) then
	    mov(0,eax);
	  else
	    mov(1,eax);
	  endif;
	  shr(3*4,edx);
	  add(eax,edx);
	  pop(eax);
	  _write_segment_desc(eax, edx, csegmBase, TRUE, esi, CODE, PAGE_GRANULARITY);
	else
	  _write_segment_desc(eax, edx, csegmBase, TRUE, esi, CODE, BYTE_GRANULARITY);
	endif;
	add(esi,eax);
	mov(ax,(type tss_t [ebx]).cs_reg);
      else
	jmp unset;
      endif;
    else
      mov(0,(type tss_t [ebx]).cs_reg);
    endif;
    if (dsegmBase != NO_BASE) then
      if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	add(@size(dword),ecx);
	sseg:mov(eax,[ecx]);
	mov(dsegmLimit,edx);
	if (edx > $fffff) then
	  push(eax);
	  push(edx);
	  and(%1111111111,edx);
	  pop(edx);
	  if (@z) then
	    mov(0,eax);
	  else
	    mov(1,eax);
	  endif;
	  shr(3*4,edx);
	  add(eax,edx);
	  pop(eax);
	  _write_segment_desc(eax, edx, dsegmBase, TRUE, esi, DATA, PAGE_GRANULARITY);
	else
	  _write_segment_desc(eax, edx, dsegmBase, TRUE, esi, DATA, BYTE_GRANULARITY);
	endif;
	add(esi,eax);
	mov(ax,(type tss_t [ebx]).ds_reg);
      else
	jmp unset;
	endif;
    else
      mov(0,(type tss_t [ebx]).ds_reg);
    endif;
    if (esegmBase != NO_BASE) then
      if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	add(@size(dword),ecx);
	sseg:mov(eax,[ecx]);
	mov(esegmLimit,edx);
	if (edx > $fffff) then
	  push(eax);
	  push(edx);
	  and(%1111111111,edx);
	  pop(edx);
	  if (@z) then
	    mov(0,eax);
	  else
	    mov(1,eax);
	  endif;
	  shr(3*4,edx);
	  add(eax,edx);
	  pop(eax);
	  _write_segment_desc(eax, edx, esegmBase, TRUE, esi, DATA, PAGE_GRANULARITY);
	else
	  _write_segment_desc(eax, edx, esegmBase, TRUE, esi, DATA, BYTE_GRANULARITY);
	endif;
	add(esi,eax);
	mov(ax,(type tss_t [ebx]).es_reg);
	else
	  jmp unset;
	endif;
      else
	push(eax);
	mov((type tss_t [ebx]).ds_reg, ax);
	mov(ax, (type tss_t [ebx]).es_reg);
	pop(eax);
      endif;
      if (fsegmBase != NO_BASE) then
	if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	  add(@size(dword),ecx);
	  sseg:mov(eax,[ecx]);
	  mov(fsegmLimit,edx);
	  if (edx > $fffff) then
	    push(eax);
	    push(edx);
	    and(%1111111111,edx);
	    pop(edx);
	    if (@z) then
	      mov(0,eax);
	    else
	      mov(1,eax);
	    endif;
	    shr(3*4,edx);
	    add(eax,edx);
	    pop(eax);
	    _write_segment_desc(eax, edx, fsegmBase, TRUE, esi, DATA, PAGE_GRANULARITY);
	  else
	    _write_segment_desc(eax, edx, fsegmBase, TRUE, esi, DATA, BYTE_GRANULARITY);
	  endif;
	  add(esi,eax);
	  mov(ax,(type tss_t [ebx]).fs_reg);
	else
	  jmp unset;
	endif;
      else
	push(eax);
	mov((type tss_t [ebx]).ds_reg, ax);
	mov(ax, (type tss_t [ebx]).fs_reg);
	pop(eax);
      endif;
      if (gsegmBase != NO_BASE) then
	if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	  add(@size(dword),ecx);
	  sseg:mov(eax,[ecx]);
	  mov(gsegmLimit,edx);
	  if (edx > $fffff) then
	    push(eax);
	    push(edx);
	    and(%1111111111,edx);
	    pop(edx);
	    if (@z) then
	      mov(0,eax);
	    else
	      mov(1,eax);
	    endif;
	    shr(3*4,edx);
	    add(eax,edx);
	    pop(eax);
	    _write_segment_desc(eax, edx, gsegmBase, TRUE, esi, DATA, PAGE_GRANULARITY);
	  else
	    _write_segment_desc(eax, edx, gsegmBase, TRUE, esi, DATA, BYTE_GRANULARITY);
	  endif;
	  add(esi,eax);
	  mov(ax,(type tss_t [ebx]).gs_reg);
	else
	  jmp unset;
	endif;
      else
	push(eax);
	mov((type tss_t [ebx]).ds_reg, ax);
	mov(ax, (type tss_t [ebx]).gs_reg);
	pop(eax);
      endif;
      if (ssegmBase != NO_BASE) then
	if (get_free_gdt_idx() != INVALID_GDT_IDX) then
	  add(@size(dword),ecx);
	  sseg:mov(eax,[ecx]);
	  mov(ssegmLimit,edx);
	if (edx > $fffff) then
	  push(eax);
	  push(edx);
	  and(%1111111111,edx);
	  if (@z) then
	    mov(0,eax);
	  else
	    mov(1,eax);
	  endif;
	  pop(edx);
	  shr(10,edx);
	  add(eax,edx);
	  pop(eax);
	  _write_segment_desc(eax, edx, ssegmBase, TRUE, esi, DATA, PAGE_GRANULARITY);
	else
	  _write_segment_desc(eax, edx, ssegmBase, TRUE, esi, DATA, BYTE_GRANULARITY);
	endif;
	add(esi,eax);
	mov(ax,(type tss_t [ebx]).ss_reg);
	mov(ax,(type tss_t [ebx]).ss0);
      else
	jmp unset;
      endif;
    else
      push(eax);
      mov((type tss_t [ebx]).ds_reg, ax);
      mov(ax, (type tss_t [ebx]).ss_reg);
      pop(eax);
    endif;
    if (get_free_gdt_idx() != INVALID_GDT_IDX) then
      add(@size(dword),ecx);
      sseg:mov(eax,[ecx]);

      add(KERNEL_BASE,ebx);
      _write_tss_desc(eax, @size(tss_t), ebx, TRUE, esi, TRUE, BYTE_GRANULARITY);
      sub(KERNEL_BASE,ebx);

      add(esi,eax);
      mov(ax,(type tss_t [ebx]).idx_tss);

      mov(schedticks,(type tss_t [ebx]).schedticks);
      mov(schedticks,(type tss_t [ebx]).ticksleft);
      mov(ssegmLimit,(type tss_t [ebx]).esp_reg);
      mov(ssegmLimit,(type tss_t [ebx]).ebp_reg);
      mov(start,(type tss_t [ebx]).eip_reg);
      mov($200,(type tss_t [ebx]).eflag_reg);
      mov(0,(type tss_t [ebx]).state);
      mov(0, (type tss_t [ebx]).callMask);
      mov(NULL, (type tss_t [ebx]).next);
      mov(NULL, (type tss_t [ebx]).previous);
      mov(NULL, (type tss_t [ebx]).firstSender);
      mov(NULL, (type tss_t [ebx]).nextSender);
      mov(NULL, (type tss_t [ebx]).receivingFrom);
      mov(@size(tss_t), (type tss_t [ebx]).iomap_base);
    else
      jmp unset;
    endif;
    if (get_free_pid() != INVALID_PID) then
      mov(ax, (type tss_t [ebx]).pid);
      _unfree_pid(eax);
    else
      jmp unset;
    endif;
    jmp end__create_process_S;
unset:
    lea(buffer,ebx);
    forever
      if (ebx = ecx) then
	break;
      endif;
      sseg:mov([ecx],edx);
      _free_gdt_idx(edx);
      sseg:sub(@size(dword),ecx);
    endfor;
  endif;
end__create_process_F:
  mov(E_NONEWPROCESS,eax);
  jmp end__create_process;
end__create_process_S:
  mov(edi,eax);
end__create_process:
  popfd();
  pop(esi);
  pop(edi);
  pop(edx);
  pop(ecx);
  pop(ebx);
end _create_process;

procedure showSegment(what: dword);
begin showSegment;
  push(eax);
  push(ebx);
  pushfd();
  mov(GDT_BASE,eax);
  add(what,eax);
  fseg:movzx((type segdesc_t [eax]).limit,ebx);
  _kputhex(ebx);
  _kputchar(LF);
  fseg:movzx((type segdesc_t [eax]).base1,ebx);
  _kputhex(ebx);
  _kputchar(LF);
  fseg:movzx((type segdesc_t [eax]).base2,ebx);
  _kputhex(ebx);
  _kputchar(LF);
  fseg:movzx((type segdesc_t [eax]).props1,ebx);
  _kputbin(ebx);
  _kputchar(LF);
  fseg:movzx((type segdesc_t [eax]).props2,ebx);
  _kputbin(ebx);
  _kputchar(LF);
  fseg:movzx((type segdesc_t [eax]).base3,ebx);
  _kputbin(ebx);
  _kputchar(LF);
  popfd();
  pop(ebx);
  pop(eax);
end showSegment;

procedure disableInterrupts_HLA;
begin disableInterrupts_HLA;
  cli;
end disableInterrupts_HLA;

procedure disableInterrupts;
begin disableInterrupts;
  disableInterrupts_HLA();
end disableInterrupts;

procedure enableInterrupts_HLA;
begin enableInterrupts_HLA;
  sti;
end enableInterrupts_HLA;

procedure enableInterrupts;
begin enableInterrupts;
  enableInterrupts_HLA();
end enableInterrupts;

procedure halt_HLA;
begin halt_HLA;
  hlt;
end halt_HLA;

procedure halt;
begin halt;
  halt_HLA();
end halt;

procedure get_limit(gdtIndex: dword); @returns("eax"); @cdecl; @external;
procedure get_limit(gdtIndex: dword);
begin get_limit;
  _get_limit(gdtIndex);
end get_limit;

end Utilities;
