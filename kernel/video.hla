unit Video;

#includeonce("always.hhf")
#includeonce("types.hhf")
#includeonce("const.hhf")
#includeonce("prototype.hhf")
#includeonce("external.hhf")
#includeonce("../include/character.hhf")
#includeonce("../include/always.hhf")

static //global variables go here

procedure _kputchar(what:dword);
begin _kputchar;
  push(eax);
  push(ebx);
  push(ecx);
  push(edx);
  pushfd();
  mov(what,ecx);
  if (character.isPrintable(cl)) then		
    mov(attrib,ch);
    movzx(cursor,eax);
putchar_back:
    if(eax<NO_LINES*NO_COLUMNS*2) then
      gseg:mov(cx,[eax]);
      add(2,cursor);			
    else
      _kscrollscreen();
      movzx(cursor,eax);
      jmp putchar_back;
    endif;
    jmp end_kputchar;
  endif;
  if (ecx=LF) then
    _kputchar(' ');
    mov(NO_COLUMNS*2,ebx);
    movzx(cursor,eax);
    zerify(edx);
    div(ebx,edx:eax);
    while (edx<>0) do
      _kputchar(' ');
      movzx(cursor,eax);
      zerify(edx);
      div(ebx,edx:eax);
    endwhile;
    jmp end_kputchar;
  endif;
  if (ecx=TAB) then
    _kputchar(' ');
    mov(NO_COLUMNS*2,ebx);
    movzx(cursor,eax);
    add(2,eax);
    zerify(edx);
    div(ebx,edx:eax);
    mov(edx,eax);
    mov(NO_TABSPACES*2,ebx);
    zerify(edx);
    div(ebx,edx:eax);
    while (edx<>0) do
      _kputchar(' ');
      mov(NO_COLUMNS*2,ebx);
      movzx(cursor,eax);
      add(2,eax);
      zerify(edx);
      div(ebx,edx:eax);
      mov(edx,eax);
      mov(NO_TABSPACES*2,ebx);
      zerify(edx);
      div(ebx,edx:eax);
    endwhile;
    jmp end_kputchar;
  endif;
end_kputchar:
  popfd();
  pop(edx);
  pop(ecx);
  pop(ebx);
  pop(eax);
end _kputchar;

procedure _kputstring(what: string); 
//1) if byte character at "what" nonzero then write to gs:cursor, else return
//2) write "attrib" byte to gs:cursor+1
//3) increase "cursor" by 2 and set cursor on screen
//4) increase "what" by 1
//5) goto 1)
//increments "cursor" by 2
begin _kputstring;
  push(eax);
  push(ebx);
  push(ecx);
  pushfd();	
  mov(what,eax);
  zerify(ebx);
  //mov(attrib,bh);
  movzx(cursor,ecx);
  mov([eax],bl);
  while(bl<>0) do
    _kputchar(ebx);
    inc(eax);
    mov([eax],bl);
  endwhile;
  popfd();
  pop(ecx);
  pop(ebx);
  pop(eax);
end _kputstring;

procedure _kputhex(what: dword);
//print hexadecimal number on screen
begin _kputhex;
  push(eax);
  push(edx);
  push(ecx);
  push(ebx);
  pushfd();
  _kputchar('$');
  mov(what,eax);
  mov($FFFFFFF,edx);
  mov(7*4,cl);
  forever
    mov(eax,ebx);
    shr(cl,ebx);
    and($F,ebx);
    if(bl<$A) then
      add($30,ebx);
    else
      add($37,ebx);
    endif;
    _kputchar(ebx);
    and(edx,eax);
    shr(4,edx);
    if (cl=0) then
      break;
    endif;
    sub(4,cl);
  endfor;
  popfd();
  pop(ebx);
  pop(ecx);
  pop(edx);
  pop(eax);
end _kputhex;

procedure _kputbin(what: dword);
//print binary number on screen
begin _kputbin;
  push(eax);
  push(edx);
  push(ecx);
  push(ebx);
  pushfd();
  _kputchar('%');
  mov(what,eax);
  mov($7FFFFFFF,edx);
  mov(31,cl);
  forever
    mov(eax,ebx);
    shr(cl,ebx);
    and(1,ebx);
    add($30,ebx);
    _kputchar(ebx);
    and(edx,eax);
    shr(1,edx);
    if (cl=0) then
      break;
    endif;
    dec(cl);
  endfor;
  popfd();
  pop(ebx);
  pop(ecx);
  pop(edx);
  pop(eax);
end _kputbin;

procedure _kputunsint(what: dword);
//put unsigned decimal number on screen
begin _kputunsint;
  push(eax);
  push(ebx);
  push(ecx);
  push(edx);
  push(edi);
  pushfd();
  mov(what,eax);
  mov(1000000000,ebx);
  forever
    mov(eax,ecx);
    zerify(edx);
    div(ebx,edx:eax);
    add($30,eax);
    _kputchar(eax);
  if (ebx=1) then
    break;
  endif;
  sub($30,eax);
  mul(ebx,eax);
  sub(eax,ecx);
  mov(ecx,eax);
  mov(eax,edi);
  mov(ebx,eax);
  zerify(edx);
  div(10,edx:eax);
  mov(eax,ebx);
  mov(edi,eax);
  endfor;
  popfd();
  pop(edi);
  pop(edx);
  pop(ecx);
  pop(ebx);
  pop(eax);
end _kputunsint;

procedure _kputsint(what: dword);
begin _kputsint;
  push(eax);
  push(ebx);
  pushfd();
  mov(what,eax);
  mov(eax,ebx);
  and($80000000,eax);
  if (@nz) then
    _kputchar('-');
    not(ebx);
    add(1,ebx);
  endif;
  _kputunsint(ebx);
  popfd();
  pop(ebx);
  pop(eax);
end _kputsint;

procedure _kcls;
//clear screen, set "cursor" to zero and set cursor on screen
begin _kcls;
  push(eax);
  push(ebx);
  pushfd();
  zerify(eax);

  mov(attrib,bh);
  mov($00,bl);
  shl(16,ebx);
  mov(attrib,bh);
  mov($00,bl);

  while (eax<NO_LINES*NO_COLUMNS*2) do
    gseg: mov(ebx,[eax]);
    add(4,eax);
  endwhile;
  mov(0,cursor);
  popfd();
  pop(ebx);
  pop(eax);
end _kcls;

procedure _kscrollscreen;
//scroll screen by 1 line
//set "cursor" to (NO_LINES-1)*NO_COLUMNS*2 and set cursor on screen
begin _kscrollscreen;
  push(eax);
  push(ebx);
  push(ecx);
  push(esi);
  push(edi);
  pushfd();
  mov(eseg,ax);
  mov(gseg,bx);
  mov(bx,eseg);
  mov(((NO_LINES*NO_COLUMNS*2)-(NO_COLUMNS*2)) div @size(dword),ecx);
  mov(NO_COLUMNS*2,esi);
  zerify(edi);
  cld();
  gseg: rep.movsd();
  mov(ax,eseg);
  mov((NO_LINES*NO_COLUMNS*2)-(NO_COLUMNS*2),eax);
  while (eax<NO_LINES*NO_COLUMNS*2) do
    gseg: mov($F000F00,(type dword [eax]));
    add(4,eax);
  endwhile;
  mov((NO_LINES*NO_COLUMNS*2)-(NO_COLUMNS*2),cursor);
  popfd();
  pop(edi);
  pop(esi);
  pop(ecx);
  pop(ebx);
  pop(eax);
end _kscrollscreen;

/*procedure _kmove_cursor;
//set cursor on screen at position "cursor"/2
begin _kmove_cursor;
  push(eax);
  push(ecx);
  push(edx);
  pushfd();
  movzx(echcursor,ecx);
  mov(echattrib,al);
  gseg: mov(al,(type byte [ecx + 1]));
  shr(1,ecx);
  mov($03D4,edx);
  mov($0E0F,eax);
  out(al,dx);
  inc(edx);
  mov(cl,al);
  out(al,dx);
  dec(edx);
  shr(8,ax);	
  out(al,dx);
  inc(edx);
  mov(ch,al);
  out(al,dx);
  popfd();
  pop(edx);
  pop(ecx);
  pop(eax);
end _kmove_cursor;*/

procedure kputchar(what: dword); @cdecl; @external;
procedure kputchar(what: dword);
begin kputchar;
  _kputchar(what);
end kputchar;

procedure kputstring(what: string); @cdecl; @external;
procedure kputstring(what: string);
begin kputstring;
  _kputstring(what);
end kputstring;

procedure kputhex(what: dword); @cdecl; @external;
procedure kputhex(what: dword);
begin kputhex;
  _kputhex(what);
end kputhex;

procedure kputunsint(what: dword); @cdecl; @external;
procedure kputunsint(what: dword);
begin kputunsint;
  _kputunsint(what);
end kputunsint;

procedure kputsint(what: dword); @cdecl; @external;
procedure kputsint(what: dword);
begin kputsint;
  _kputsint(what);
end kputsint;

end Video;
