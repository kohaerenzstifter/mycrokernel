unit Table;

#includeonce("types.hhf")
#includeonce("const.hhf")
#includeonce("prototype.hhf")
#includeonce("external.hhf");

static //global variables go here
	align(4);
	err: uns32;
	align(4);
	curQueue: int32;
	align(4);
	gdtBitmap: dword[(NO_AVL_DSCRPTS div @size(dword)) div 8] := 
	[
		#for (i:=1 to (NO_AVL_DSCRPTS div @size(dword)) div 8)
		0,
		#endfor
	];
	align(4);
	pidBitmap: dword[(NO_AVL_PIDS div @size(dword)) div 8] := 
	[
		#for (i:=1 to (NO_AVL_PIDS div @size(dword)) div 8)
		0,
		#endfor
	];
	align(4);
	curptr: pointer to tss_t := NULL;//&idlestate;//&dummystate;
	nextptr: pointer to tss_t := NULL;
	align(4);
	proctab: tss_t[MAX_NO_PROCS] :=
	[
		#for (i := 0 to MAX_NO_PROCS-2)
		tss_t:[0,0,$fffffffc,IDX_INTSTACK*@size(segdesc_t),0,0,EMPTY,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,@size(tss_t),0,0,0,NULL, NULL, NULL, NULL],
		#endfor
		tss_t:[0,0,$fffffffc,IDX_INTSTACK*@size(segdesc_t),0,0,EMPTY,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,@size(tss_t),0,0,0,NULL, NULL, NULL, NULL]
	];
	align(4);
	memory: memdesc_t[MAX_MEM_AREAS];
	align(4);
	no_memregs: uns32;
	align(4);
	cursor: uns16:=0; //the position of the cursor (absolute memory offset from gs, i.e. ALWAYS even)
	align(4);
	echcursor: uns16:=START_ECHO_LINE; //the position of the echo cursor (absolute memory offset from gs, i.e. ALWAYS even)
	align(4);
	attrib: byte:=15; //the current attribute byte of text written to screen
	align(4);
	echattrib: byte:=120; //the current attribute byte of echo written to screen
	align(4);
	gdt: DTdesc_t;
	align(4);
	idt: DTdesc_t:=DTdesc_t:[$FFFF,IDT_BASE];
	align(4);
	kbd: keyboard_t:=keyboard_t:[&kbd.buffer[0],0,KBD_BUFFER_SIZE dup [0]];
	align(4);
	counter1: dword;
	align(4);
	counter2: byte;
	align(4);
	hours: dword;
	align(4);
	minutes: byte;
	align(4);
	seconds: byte;
	align(4);
	schedqueue: schedqueue_t := schedqueue_t: [NULL,0,0];
	align(4);
	km: keymap_t[NO_SCANCODES, NO_MODIFIERS]:=
	[
		keymap_t:[&kputhex_HLA, 1, 0], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputhex_HLA, 1, 11], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 2], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 3], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 4], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 5], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 6], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 7], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 8], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 9], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 10], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 11], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 12], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 13], keymap_t:[NULL, 0, 0],
		keymap_t:[&backspace_pressed, 0, NULL], keymap_t:[&backspace_pressed, 0, NULL],
		keymap_t:[&kputunsint_HLA, 1, 15], keymap_t:[NULL, 0, 0],
		keymap_t:[&readchar, 1, (type dword 'q')], keymap_t:[&readchar, 1, (type dword 'Q')],
		keymap_t:[&readchar, 1, (type dword 'w')], keymap_t:[&readchar, 1, (type dword 'W')],
		keymap_t:[&readchar, 1, (type dword 'e')], keymap_t:[&readchar, 1, (type dword 'E')],
		keymap_t:[&readchar, 1, (type dword 'r')], keymap_t:[&readchar, 1, (type dword 'R')],
		keymap_t:[&readchar, 1, (type dword 't')], keymap_t:[&readchar, 1, (type dword 'T')],
		keymap_t:[&readchar, 1, (type dword 'y')], keymap_t:[&readchar, 1, (type dword 'Y')],
		keymap_t:[&readchar, 1, (type dword 'u')], keymap_t:[&readchar, 1, (type dword 'U')],
		keymap_t:[&readchar, 1, (type dword 'i')], keymap_t:[&readchar, 1, (type dword 'I')],
		keymap_t:[&readchar, 1, (type dword 'o')], keymap_t:[&readchar, 1, (type dword 'O')],
		keymap_t:[&readchar, 1, (type dword 'p')], keymap_t:[&readchar, 1, (type dword 'P')],
		keymap_t:[&kputunsint_HLA, 1, 16], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 17], keymap_t:[NULL, 0, 0],
		keymap_t:[&enter_pressed, 0, NULL], keymap_t:[&enter_pressed, 0, NULL],
		keymap_t:[&kputstring_HLA, 1, &derstring], keymap_t:[NULL, 0, 0],
		keymap_t:[&readchar, 1, (type dword 'a')], keymap_t:[&readchar, 1, (type dword 'A')],
		keymap_t:[&readchar, 1, (type dword 's')], keymap_t:[&readchar, 1, (type dword 'S')],
		keymap_t:[&readchar, 1, (type dword 'd')], keymap_t:[&readchar, 1, (type dword 'D')],
		keymap_t:[&readchar, 1, (type dword 'f')], keymap_t:[&readchar, 1, (type dword 'F')],
		keymap_t:[&readchar, 1, (type dword 'g')], keymap_t:[&readchar, 1, (type dword 'G')],
		keymap_t:[&readchar, 1, (type dword 'h')], keymap_t:[&readchar, 1, (type dword 'H')],
		keymap_t:[&readchar, 1, (type dword 'j')], keymap_t:[&readchar, 1, (type dword 'J')],
		keymap_t:[&readchar, 1, (type dword 'k')], keymap_t:[&readchar, 1, (type dword 'K')],
		keymap_t:[&readchar, 1, (type dword 'l')], keymap_t:[&readchar, 1, (type dword 'L')],
		keymap_t:[&kputunsint_HLA, 1, 28], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 29], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 30], keymap_t:[NULL, 0, 0],
		keymap_t:[&shift_pressed, 0, NULL], keymap_t:[&shift_pressed, 0, NULL],
		keymap_t:[&kputunsint_HLA, 1, 32], keymap_t:[NULL, 0, 0],
		keymap_t:[&readchar, 1, (type dword 'z')], keymap_t:[&readchar, 1, (type dword 'Z')],
		keymap_t:[&readchar, 1, (type dword 'x')], keymap_t:[&readchar, 1, (type dword 'X')],
		keymap_t:[&readchar, 1, (type dword 'c')], keymap_t:[&readchar, 1, (type dword 'C')],
		keymap_t:[&readchar, 1, (type dword 'v')], keymap_t:[&readchar, 1, (type dword 'V')],
		keymap_t:[&readchar, 1, (type dword 'b')], keymap_t:[&readchar, 1, (type dword 'B')],
		keymap_t:[&readchar, 1, (type dword 'n')], keymap_t:[&readchar, 1, (type dword 'N')],
		keymap_t:[&readchar, 1, (type dword 'm')], keymap_t:[&readchar, 1, (type dword 'M')],
		keymap_t:[&kputunsint_HLA, 1, 44], keymap_t:[&kputunsint_HLA, 1, 44],
		keymap_t:[&kputunsint_HLA, 1, 44], keymap_t:[&kputunsint_HLA, 1, 44],
		keymap_t:[&kputunsint_HLA, 1, 42], keymap_t:[NULL, 0, 0],
		keymap_t:[&shift_pressed, 0, NULL], keymap_t:[&shift_pressed, 0, NULL],
		keymap_t:[&kputunsint_HLA, 1, 44], keymap_t:[NULL, 0, 0],
		keymap_t:[&kputunsint_HLA, 1, 45], keymap_t:[NULL, 0, 0],
		keymap_t:[&readchar, 1, (type dword ' ')], keymap_t:[&readchar, 1, (type dword ' ')],
		keymap_t:[NULL, 1, 40], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 41], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 42], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 45], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 46], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 47], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 48], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 49], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 50], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 51], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 52], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 53], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 54], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 55], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 56], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 57], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 58], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 59], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 60], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 61], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 62], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 63], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 64], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 65], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 66], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 67], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 68], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 69], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 70], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 71], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 72], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 73], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 74], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 75], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 76], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 77], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 78], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 79], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 80], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 81], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 82], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 83], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 84], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 85], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 86], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 87], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 88], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 89], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 40], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 41], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 42], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 45], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 46], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 47], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 48], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 49], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 50], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 51], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 52], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 53], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 54], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 55], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 56], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 57], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 58], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 59], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 60], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 61], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 62], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 63], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 64], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 65], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 66], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 67], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 68], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 69], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 70], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 71], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 72], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 73], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 74], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 75], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 76], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 77], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 78], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 79], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 80], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 81], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 82], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 83], keymap_t:[NULL, 0, 0],
		keymap_t:[&shift_released, 0, NULL], keymap_t:[&shift_released, 0, NULL],
		keymap_t:[NULL, 1, 85], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 86], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 87], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 88], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 23], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 22], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 21], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 20], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 19], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 18], keymap_t:[NULL, 0, 0],
		keymap_t:[NULL, 1, 17], keymap_t:[NULL, 0, 0],
		keymap_t:[&shift_released, 0, NULL], keymap_t:[&shift_released, 0, NULL]
	];
	
	align(4);
	syscalls: syscall_t[NO_SYSCALLS]:=
	[
		syscall_t:[&syscall_exit],
		syscall_t:[&syscall_setFeature],
		syscall_t:[&syscall_receive],
		syscall_t:[&syscall_send_by_feature]
	];
	
	align(4);
	cmds: command_t[NO_COMMANDS]:=
	[
		command_t:["say",VARIANT, &say],
		command_t:["kcls",1, &kcls_HLA],
		command_t:["uptime",1, &uptime]
	];
	align(4);
	params: byte[NO_COLUMNS*2];
	align(4);
	derstring: string; @nostorage;
	byte 'I', ' ', 'P','u','d','a','a','a',0;
	align(4);
	shiftSemaphore: uns32;
	align(4);
	kernelstate: tss_t := tss_t:[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					PID_KERNEL,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					@size(tss_t),
					0,
					IDX_KERNELTSS*@size(segdesc_t),
					0,
					NULL,
					NULL,
					NULL,
					NULL
				];

	idlestate: tss_t := tss_t:[
					0,
					0,
					$fffffffc,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					0,
					PID_IDLE,
					0,
					0,
					&idle_task,
					$200,
					0,
					0,
					0,
					0,
					$fffffffc,
					0,
					0,
					0,
					0,
					0,
					IDX_KERNELCODE*@size(segdesc_t),
					0,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					@size(tss_t),
					0,
					IDX_IDLETASKTSS*@size(segdesc_t),
					0,
					NULL,
					NULL,
					NULL,
					NULL
				];

	clockintstate: tss_t := tss_t:[
					0,
					0,
					$fffffffc,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					0,
					PID_CLOCK,
					0,
					0,
					&clock_int,
					0,
					0,
					0,
					31,
					0,
					$fffffffc,
					0,
					0,
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_KERNELCODE*@size(segdesc_t),
					0,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_MEMORY*@size(segdesc_t),
					0,
					IDX_VIDEO*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					@size(tss_t),
					0,
					IDX_CLOCKINTTSS*@size(segdesc_t),
					0,
					NULL,
					NULL,
					NULL,
					NULL
				];

	keyintstate: tss_t := tss_t:[
					0,
					0,
					$fffffffc,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					0,
					PID_KEYINT,
					0,
					0,
					&key_int,
					0,
					0,
					0,
					31,
					0,
					$fffffffc,
					0,
					0,
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_KERNELCODE*@size(segdesc_t),
					0,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_MEMORY*@size(segdesc_t),
					0,
					IDX_VIDEO*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					@size(tss_t),
					0,
					IDX_KEYINTTSS*@size(segdesc_t),
					0,
					NULL,
					NULL,
					NULL,
					NULL
				];

	syscallstate: tss_t := tss_t:[
					0,
					0,
					$fffffffc,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					0,
					PID_SYSCALL,
					0,
					0,
					&sys_call,
					0,
					0,
					0,
					31,
					0,
					$fffffffc,
					0,
					0,
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_KERNELCODE*@size(segdesc_t),
					0,
					IDX_INTSTACK*@size(segdesc_t),
					0,
					IDX_KERNELDATA*@size(segdesc_t),
					0,
					IDX_MEMORY*@size(segdesc_t),
					0,
					IDX_VIDEO*@size(segdesc_t),
					0,
					0,
					0,
					0,
					0,
					@size(tss_t),
					0,
					IDX_SYSCALL*@size(segdesc_t),
					0,
					NULL,
					NULL,
					NULL,
					NULL
				];

storage //uninitialised global variables go here
	align(4);

readonly //global, initialised, read-only variables go here; (better not use readonly section)
	align(4);
	pproctab: dword[MAX_NO_PROCS] :=
	[
		#for (i := 0 to MAX_NO_PROCS-2)
		&proctab[i*@size(tss_t)],
		#endfor
		&proctab[(MAX_NO_PROCS-1)*@size(tss_t)]
	];
end Table;
